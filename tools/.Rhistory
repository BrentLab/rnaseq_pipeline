print("hello")
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], paste(design[i,'GENOTYPE'], sample_id, sep='&')) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], paste(design[i,'GENOTYPE'], sample_id, sep='&'))
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], paste(design[i,'GENOTYPE'], sample_id, sep='')) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], paste(design[i,'GENOTYPE'], sample_id, sep=''))
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], design[i,'GENOTYPE']) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], design[i,'GENOTYPE'])
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], sample_id) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], sample_id)
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
?sd
source('~/code/cmatkhan/misc/wt_analysis.R')
View(reps_of_3)
par(mfrow=c(4,12))
for (index in 1:48){
count_file_names = as.character(split_reps_of_3[[index]]$COUNTFILENAME)
rep_matrix = as.matrix(norm_reps_of_3[, count_file_names])
plotRLE(rep_matrix, main = 'blahblabhabl', ylim = c(-7,7))
}
par(mfrow=c(1,5))
for (index in 1:5){
count_file_names = as.character(split_reps_of_3[[index]]$COUNTFILENAME)
rep_matrix = as.matrix(norm_reps_of_3[, count_file_names])
plotRLE(rep_matrix, main = 'blahblabhabl', ylim = c(-7,7))
}
splitParsedQuery = function(parsed_query_df, columns_to_parse, input_cols){
# split parsed_query_df into groups based on cols_of_interest
split_parsed_query_df = parsed_query_df %>%
select(columns_to_parse) %>%
# The ugly code below 'unquoting' the character vector in order to pass
# the arguments as column variables see https://adv-r.hadley.nz/quasiquotation.html
group_split(!!! rlang::syms(input_cols))
# drop tables with less than 2 replicates
table_indicies_to_drop = c()
for (index in 1:length(split_parsed_query_df)){
if (nrow(split_parsed_query_df[[index]]) < 2){
table_indicies_to_drop = c(table_indicies_to_drop, index)
}
}
return(split_parsed_query_df[-table_indicies_to_drop])
} # end splitParsedQuery
path = '/mnt/htcf_scratch/chasem/rnaseq_pipeline/query/no_159_314_468_480_standardized.csv'
df = read_csv(path)
query_df = read_csv(path)
log2_cpm_df = read_csv('/mnt/htcf_scratch/chasem/rnaseq_pipeline/no_159_314_468_480/no_159_314_468_480_log2_cpm.csv')
cols_to_keep = c('COUNTFILENAME', 'GENOTYPE', 'TREATMENT', 'TIMEPOINT', 'REPLICATE')
groups = c('GENOTYPE', 'TREATMENT', 'TIMEPOINT')
split_query_df = splitParsedQuery(query_df, cols_to_keep, groups)
split_query_df
for (group in split_query_df){}
for (group in split_query_df){
if( unique(as.character(group$GENOTYPE)) == 'CNAG_00031'){
print(group)
}
}
for (group in split_query_df){
if( unique(as.character(group$GENOTYPE)) == 'CNAG_00031'){
print(group)
x = group$COUNTFILENAME
}
}
x
log2_cpm_df[,x]
raw_df = read_csv('/mnt/htcf_scratch/chasem/rnaseq_pipeline/no_159_314_468_480/no_159_314_468_480_raw_count.csv')
cnag_00031_log2_df = log2_cpm_df[,x]
cnag_00031_raw_df = raw
cnag_00031_raw_df = raw_count_df[,x]
head(cnag_00031_log2_df)
head(cnag_00031_raw_df)
cnag_00031_raw_df[CNAG_G418]
cnag_00031_raw_df[CNAG_G418,]
cnag_00031_raw_df['CNAG_G418',]
cnag_00031_raw_df['CNAG_NAT',]
rownames(cnag_00031_log2_df) = rownames(cnag_00031_raw_df)
cnag_00031_log2_df = as.data.frame(cnag_00031_log2_df)
rownames(cnag_00031_log2_df) = rownames(cnag_00031_raw_df)
cnag_00031_log2_df['CNAG_G418',]
cnag_00031_log2_df['CNAG_NAT',]
for (group in split_query_df){
if( unique(as.character(group$GENOTYPE)) == 'CNAG_00039'){
print(group)
cnag_00039 = group$COUNTFILENAME
}
}
cnag_00039_raw_df = raw_count_df[,cnag_00039]
cnag_00039
cnag_00039_raw_df = raw_count_df[,as.character(cnag_00039)]
head(raw_count)
head(raw_count_df)
x
cnag_00039
raw_count_df[,cnag_00039]
raw_count_df[,'Brent_14_GTAC_14_TTTAACTATC_S15_R1_001_read_count.tsv']
cnag_00039
raw_count_df[,'Brent_36_GTAC_36_TGGCATAATC_S37_R1_001_read_count.tsv']
cnag_00039
raw_count_df[,'Brent_2641_14_GTAC_14_TTTAACT_S15_R1_001_read_count.tsv']
raw_count_df[,'Brent_2641_36_GTAC_36_TGGCATA_S37_R1_001_read_count.tsv']
cnag_00039
cnag_00039[3]
cnag_00039[-3]
cnag_00039 = cnag_00039[-3]
cnag_00039_raw = raw_count_df[, cnag_00039]
cnag_00039['CNAG_NAT', ]
cnag_00039_raw['CNAG_NAT', ]
cnag_00039_raw['CNAG_G418', ]
cnag_00031_raw_df['CNAG_00031', ]
cnag_00031_log2_df['CNAG_00031', ]
View(raw_df)
