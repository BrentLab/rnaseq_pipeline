print("hello")
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], paste(design[i,'GENOTYPE'], sample_id, sep='&')) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], paste(design[i,'GENOTYPE'], sample_id, sep='&'))
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
debugSource('~/code/brentlab/rnaseq_pipeline/tools/DE_modules.R')
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], paste(design[i,'GENOTYPE'], sample_id, sep='')) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], paste(design[i,'GENOTYPE'], sample_id, sep=''))
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], design[i,'GENOTYPE']) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], design[i,'GENOTYPE'])
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
parse_metadata <- function(design_filepath, qa_filepath) {
## Parse design table and sample quality sheet, and output contrast dictionary
## load files
design <- readxl::read_xlsx(design_filepath)#<- read.xlsx(design_filepath, sheetIndex=1, check.names=FALSE, na.string="NA")
qa <- readxl::read_xlsx(qa_filepath)#read.xlsx(qa_filepath, sheetIndex=1, check.names=FALSE)
## find valid samples
valid_samples <- c()
for (i in 1:nrow(qa)) {
if (!is.na(qa$MANUAL_AUDIT[i])) {
if (qa$MANUAL_AUDIT[i] == 0)
valid_samples <- c(valid_samples, as.character(qa$FASTQFILENAME[i]))
}
}
## group samples using constrast descriptor as key and valid samples as value
d_cols <- colnames(design)
contrast_dict <- list()
for (col in d_cols) {
## for each contrast group
col_split <- strsplit(col, '\\[|\\]')[[1]]
if (length(col_split) <= 1) next
## get the contrast type, e.g. GENOTYPE
contrast_type <- strsplit(col_split[3], '\\:')[[1]][1]
contrast_dict[[col]] <- list('0'=c(), '1'=c())
for (i in 1:nrow(design)) {
## for each sample if is assigned with a number and is valid
sample_id <- as.character(design[i,'FASTQFILENAME'])
if (is.na(design[i,col]))
next
if (design[i,col] == 0 & sample_id %in% valid_samples)
contrast_dict[[col]][['0']] <- c(contrast_dict[[col]][['0']], sample_id) # change parsing based on change in colname in prepare_de_table
else if (design[i,col] == 1 & sample_id %in% valid_samples)
contrast_dict[[col]][['1']] <- c(contrast_dict[[col]][['1']], sample_id)
}
## remove disqualified contrast group, where no replicate is available for both samples
if(length(contrast_dict[[col]][['0']]) < 2 & length(contrast_dict[[col]][['1']]) < 2) {
contrast_dict[[col]] <- NULL
cat('WARNING: Contrast group', col, 'will not be used, due to no replicate for both samples.\n')
}
}
return(contrast_dict)
}# end parse_metadata()
x = parse_metadata('/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_design_table.xlsx', '/home/chase/Documents/GCN4_mcisaac/GCN4_mcisaac_quality_summary_2.xlsx')
x
