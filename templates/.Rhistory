library(tidyverse)
library(ggplot2)
library(ggrepel)
library(calecopal)
# some graphs adapted from
# https://bioinformatics-core-shared-training.github.io/cruk-summer-school-2018/RNASeq2018/html/02_Preprocessing_Data.nb.html
source('/home/chase/code/cmatkhan/misc/ReplicateAnalysisFunctions.R')
path_to_raw_counts = '/home/chase/Documents/CNAG_all_after_filenameupdate/CNAG_all_after_filenameupdate_raw_count.csv'
path_to_query = '/home/chase/Documents/CNAG_05420_all_after_update.csv'
input_cols = c('genotype', 'treatment', 'timePoint')
cols_of_interest = c('fastqFileName', 'replicate', input_cols)
# read in raw count data
raw_counts_df = countDataFrame(path_to_raw_counts)
# read in query
parsed_query_df = parseQuery(path_to_query, cols_of_interest)
# plot raw count histogram
library_sizes = colSums(raw_counts_df[,-1])
library_sizes = as.data.frame(library_sizes)
library_sizes = rownames_to_column(library_sizes, var='sample')
ggplot(library_sizes, aes(x = sample, y = library_sizes))+
geom_bar(stat='identity')+
labs(title="Library Size (raw)", xlab = "sample", ylab = "library_size")+
theme(axis.text.x=element_blank())
#abline(h=2e6, lty=2)
# convert to cpm
count_cpm = countsPerMillion(raw_counts_df)
log2_count_cpm = log2(count_cpm + 1) # add pseudocount
rownames(count_cpm) = raw_counts_df$gene
rownames(log2_count_cpm) = raw_counts_df$gene
log2_cpm_lib_size = as.data.frame(log2_count_cpm)
log2_cpm_lib_size = colSums(log2_cpm_lib_size)
log2_cpm_lib_size = as.data.frame(log2_cpm_lib_size)
log2_cpm_lib_size = rownames_to_column(log2_cpm_lib_size, var='sample')
ggplot(log2_cpm_lib_size, aes(x = sample, y = log2_cpm_lib_size))+
geom_bar(stat='identity')+
labs(title="Library Size (raw)", xlab = "sample", ylab = "library_size")+
theme(axis.text.x=element_blank())
# split parsed_query_df into groups based on
split_parsed_query_df = parsed_query_df %>%
select(cols_of_interest) %>%
# The ugly code below 'unquoting' the character vector in order to pass the arguments as column variables
# see https://adv-r.hadley.nz/quasiquotation.html
group_split(!!! rlang::syms(input_cols))
for(group in split_parsed_query_df){
group_desc = paste(as.character(unique(group[,input_cols])), collapse = "_")
x_label = "log2 median cpm"
y_label = "frequency"
# arbitrarily re-number replicates
group$replicate = 1:nrow(group)
# subset log2_count_cpm by the fastqfilenames (samples) in a given group in split_parsed_query_df
subset_log2_cpm = log2_count_cpm[, group$fastqFileName]
subset_log2_cpm = as.data.frame(subset_log2_cpm)
subset_log2_cpm$median = apply(subset_log2_cpm, 1, median)
# summarize by median
subset_log2_cpm = select(subset_log2_cpm, median)
# plot histogram of median log2 cpm of a given group in split_parsed_query_df
overall_dist = ggplot(subset_log2_cpm, aes(median))+
geom_histogram(na.rm = TRUE, bins = 105, alpha = .5, fill = '#ECBD95')
# extract genotype of the group (there will be only one)
genotype = unique(group[,'genotype'])[[1]]
# remove "_over" if it is present
if(str_detect(genotype, "_over")){
genotype = str_remove(genotype, "_over")
}
fastqFileName_list = as.character(group$fastqFileName)
if(str_detect(genotype, "\\.")){
genotype = str_split(genotype, "\\.")[[1]]
}
# add drug markers
drug_markers = c("CNAG_G418", "CNAG_NAT")
# extract expression of perturbed gene
perturbed_df = as_tibble(log2_count_cpm[genotype, fastqFileName_list])
if (ncol(perturbed_df) == 1){
perturbed_df$sample = fastqFileName_list
perturbed_df$genotype = genotype
} else {
perturbed_df = stack(perturbed_df)
perturbed_df$gene = genotype
colnames(perturbed_df)[2] = "sample"
colnames(perturbed_df)[3] = "genotype"
}
# get expression of drug markers
drug_markers = c("CNAG_G418", "CNAG_NAT")
drug_markers_df = as_tibble(log2_count_cpm[drug_markers, fastqFileName_list])
drug_markers_df = stack(drug_markers_df)
drug_markers_df$gene = drug_markers
colnames(drug_markers_df)[2] = "sample"
colnames(drug_markers_df)[3] = "genotype"
# plot points representing expression of a genotype (or marker) in a given sample
overall_dist = overall_dist +
# uncomment this to display dots by sample (fastqFileName)
#geom_point(data = perturbed_df, aes(perturbed_df$value,y=0, color = perturbed_df$sample)) +
geom_text_repel(data = perturbed_df, aes(x = perturbed_df$value, y = perturbed_df$value, label = perturbed_df$genotype),
nudge_y = 200,
vjust = 0,
segment.size = .2) +
geom_point(data = drug_markers_df, aes(drug_markers_df$value,y=100, color = drug_markers_df$genotype))+
theme(legend.justification = c(1,1), legend.position = c(1,1))+
labs(title=group_desc, y=y_label, x=x_label)+
xlim(0,15)+
ylim(0,400)
print(overall_dist)
} # end for
log2_cpm_lib_size
